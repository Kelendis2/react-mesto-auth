{"ast":null,"code":"export const BASE_URL = 'https://api.nomoreparties.co';\nexport const register = _ref => {\n  let {\n    email,\n    password\n  } = _ref;\n  return fetch(`${BASE_URL}/signup`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(res => res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`));\n};\nexport const authorize = (email, password) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(res => res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`));\n};\nexport const getContent = token => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    }\n  }).then(res => res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`));\n};","map":{"version":3,"names":["BASE_URL","register","_ref","email","password","fetch","method","headers","Accept","body","JSON","stringify","then","res","ok","json","Promise","reject","status","authorize","getContent","token","Authorization"],"sources":["/Users/kelendis/Documents/GitHab/react-mesto-auth/src/utils/auth.js"],"sourcesContent":["export const BASE_URL = 'https://api.nomoreparties.co';\n\nexport const register = ({email,password}) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ email,password}),\n  }).then((res) =>\n    res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`)\n  );\n};\n\nexport const authorize = (email,password) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ email,password }),\n  }).then((res) =>\n    res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`)\n  );\n};\nexport const getContent = (token) => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`,\n    },\n  }).then((res) =>\n    res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`)\n  );\n};\n"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG,8BAA8B;AAEtD,OAAO,MAAMC,QAAQ,GAAGC,IAAA,IAAsB;EAAA,IAArB;IAACC,KAAK;IAACC;EAAQ,CAAC,GAAAF,IAAA;EACvC,OAAOG,KAAK,CAAE,GAAEL,QAAS,SAAQ,EAAE;IACjCM,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACPC,MAAM,EAAE,kBAAkB;MAC1B,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAER,KAAK;MAACC;IAAQ,CAAC;EACxC,CAAC,CAAC,CAACQ,IAAI,CAAEC,GAAG,IACVA,GAAG,CAACC,EAAE,GAAGD,GAAG,CAACE,IAAI,CAAC,CAAC,GAAGC,OAAO,CAACC,MAAM,CAAE,WAAUJ,GAAG,CAACK,MAAO,EAAC,CAC9D,CAAC;AACH,CAAC;AAED,OAAO,MAAMC,SAAS,GAAGA,CAAChB,KAAK,EAACC,QAAQ,KAAK;EAC3C,OAAOC,KAAK,CAAE,GAAEL,QAAS,SAAQ,EAAE;IACjCM,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACPC,MAAM,EAAE,kBAAkB;MAC1B,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAER,KAAK;MAACC;IAAS,CAAC;EACzC,CAAC,CAAC,CAACQ,IAAI,CAAEC,GAAG,IACVA,GAAG,CAACC,EAAE,GAAGD,GAAG,CAACE,IAAI,CAAC,CAAC,GAAGC,OAAO,CAACC,MAAM,CAAE,WAAUJ,GAAG,CAACK,MAAO,EAAC,CAC9D,CAAC;AACH,CAAC;AACD,OAAO,MAAME,UAAU,GAAIC,KAAK,IAAK;EACnC,OAAOhB,KAAK,CAAE,GAAEL,QAAS,WAAU,EAAE;IACnCM,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACPC,MAAM,EAAE,kBAAkB;MAC1B,cAAc,EAAE,kBAAkB;MAClCc,aAAa,EAAG,UAASD,KAAM;IACjC;EACF,CAAC,CAAC,CAACT,IAAI,CAAEC,GAAG,IACVA,GAAG,CAACC,EAAE,GAAGD,GAAG,CAACE,IAAI,CAAC,CAAC,GAAGC,OAAO,CAACC,MAAM,CAAE,WAAUJ,GAAG,CAACK,MAAO,EAAC,CAC9D,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}